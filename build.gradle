
///////////////////////////////////////////////////////////////////////////////////////////////////
// Buildscript
///////////////////////////////////////////////////////////////////////////////////////////////////

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    id 'org.jetbrains.intellij' version "0.0.39"
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Projects
///////////////////////////////////////////////////////////////////////////////////////////////////

println("XXX")
println(publishUsername)
println(publishPassword)
println(publishChannel)

allprojects {

    // IntelliJ plugin configuration

    apply plugin: 'org.jetbrains.intellij'

    intellij {
        pluginName 'intellij-rust'

        version ideaVersion
        downloadSources Boolean.valueOf(downloadIdeaSources)

        publish {
            username publishUsername
            password publishPassword
            pluginId '8182'
            channel publishChannel
        }

        sandboxDirectory project.rootDir.canonicalPath + "/.sandbox"
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    sourceSets {
        main.java.srcDirs += "gen"
    }

    test {
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat = 'full'
        }
    }

    // Configurations

    configurations {
        gen
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        compile "org.jetbrains.kotlin:kotlin-runtime:$kotlinVersion"

        gen 'de.jflex:jflex:1.6.0'
        gen files('lib/gk/grammar-kit-patched.jar')

        testCompile "junit:junit:4.+"
        testCompile 'org.assertj:assertj-core:3.2.0'
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// IDE support
///////////////////////////////////////////////////////////////////////////////////////////////////

apply plugin: 'idea'

idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }

    module {
        generatedSourceDirs += file('gen')
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Tasks
///////////////////////////////////////////////////////////////////////////////////////////////////

def jflexArgs(srcFlex, targetDir) {
    return [    "--skel",   "src/main/kotlin/org/rust/lang/core/lexer/RustLexer.skeleton",
                "-d",       targetDir,
                srcFlex
    ]
}

task generateRustLexer(type: JavaExec) {
    ext.src = "src/main/kotlin/org/rust/lang/core/lexer/RustLexer.flex"
    ext.dst = "gen/org/rust/lang/core/lexer/"

    main = "jflex.Main"

    args = jflexArgs(src, dst)

    inputs  .file   file(src)
    outputs .dir    file(dst + "_RustLexer.java")

    classpath configurations.gen
}

task generateRustPsiAndParser(type: JavaExec) {
    ext.src     = "src/main/kotlin/org/rust/lang/core/grammar/rust.bnf"
    ext.dstRoot = "gen"

    main = "org.intellij.grammar.Main"

    args = [ dstRoot, file(src) ]

    inputs  .file   file(src)
    outputs .dir    fileTree(dir: dstRoot + '/org/rust/lang/core/', include: '**/*.java')

    classpath configurations.gen
}

task generateLexers {
    dependsOn generateRustLexer
}

task generateParsers {
    dependsOn generateRustPsiAndParser
}

apply from: "shared.gradle"


task buildPluginCombo(type: Zip, overwrite: true) {
    dependsOn 'toml:prepareSandbox'
    dependsOn ':prepareSandbox'

    from '.sandbox/plugins'
}

clean {
    doLast {
        delete '.sandbox'
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////////////////////////

dependencies {
    compile project('jps')
    compile project('toml')
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Misc
///////////////////////////////////////////////////////////////////////////////////////////////////

version = "${version}.$buildNumber"
